Bugs:
- Fix the different results from dot output
  i.e. implement/imitate the sometimes strange dot behavior
- Fix the content of various objects (ids):
  o Fix Encodings
  o A proper solution would be to introduce a new class for this that handles all of it
- Maybe: More configuration/preferences

Possible design Improvements / refactorings:
- Cleanup the initial WPF implementation
  o Reduce duplication, reduce responsibilities/size per class/file
  o Review by someone experienced (the overall design and in particualar property changes)
  o Finer property updates, in particular also on the model
  o maybe dependency properties could/should be used somewhere?
- Add some control instance for handling multiple views and also for handling updates for the content
- Analyse/refactor the general design if necessary/useful
  o Graphs from file and/or input box and/or a changing stream/source?
  o Changes to visible nodes vs. original graph vs. input box?
  o More modifications on the graph, in particular attribute changes like filled/not-filled
    In the end we don't really get around having a second "currentgraph".
  o ... (it is getting complex and a design analysis would be a good idea)
- Find a nice design how to handle ids (See above), maybe support HTML dot files and/or structs
- More unit tests!
  o Viewmodel
  o Mocks?
  o Cover tests/checks?
- MAYBE: Think about exception handling, add much more checks, make more restriction assumptions
- MAYBE: Make sure the ToDot result is exactly the same as before
  o Maybe we don't want this...
  o Aim to get the equivalent layout output as from the original dot file
  o This involves remembering the exact order and probably also subgraphs at ends of edges
- MAYBE: Make sure that the layout uses the same ids as the original dot
  (currently not the case for non-strict edges for sure)

Content improvements:
- Support many more basic attributes (a never ending task)
- support records
- Think about interactivity and graph changes
- Make a GraphView application to interactively visualize complex dependencies,
  maybe with a hook to some other application
  